# -*- mode: org -*-

* McGyver project

** How to use this project

   To build the binary, you have to run "./configure && make" in the
   root of the project.

   It creates a "gyver" binary. It takes two arguments. The first is
   the path to a file which represents the kripke structure to check.
   The second is a string which is the formula to check on the model.
   The syntax are explained below.

   It outputs a line "result: true|false", and exits with 0 if the
   result is true and 1 if not.


*** Kripke Syntax

Here is the format of a kripke file.

   510               <- number of states
   0 !w1 s1          <- description of the state 0: w1 is false, s1 is true
    1 362 507        <- list of followers of the states 0
   1 !w1 s1          <- description of the state 0: w1 is false, s1 is true
    2 317 504        <- list of followers of the states 1
   [...]
   509 w1 !s1        <- description of the state 509: w1 is true, s1 is false
    419 506 391      <- list of followers of the states 509


*** CTL Syntax

The format of the CTL is the following:

AND(f, g), OR(f, g), NOT(f), IMPLIES(f, g), AX(f), EX(f), AF(f),
EF(f), AG(f), EG(f), AU(f, g), EU(f, g), true, false

where f and g can be another operator. Spaces are allowed.

** Packages needed for building

   - gcc-4.6
   - bison 2.5
   - flex 2.5
   - buddy 1.4: The library needs to be in the LD_LIBRARY_PATH.

** Implementation details

*** Fix Point algorithm

    We introduce an highly factorized function to perform the fix
    point algorithm. This function take as template parameters the
    type of the recursion (if we are in incremental or decremental fix
    point) and take as parameters the input `bdd' and a lambda making
    the recursion. The prototype of this function is:

#+begin_src c++
  template <class RecurType, class Lambda>
  bdd
  bdd_recursion(Lambda l, bdd prev, bdd support)
#+end_src

  The function argument `support' is a bdd containing the variable to
  clean when we leave the algorithm.

  A version with variadic template was written, but the syntax was not
  clear for the reading, and construction of unused appear.

*** Lexing and Parsing

**** Bison and Flex

     The rules of our Makefile about flex and bison are highly inspired
     of the [[http://lrde.epita.fr/cgi-bin/twiki/view/Vaucanson/Vaucanson][Vaucanson]]'s Makefiles.

**** CTL

     In our implementation, we consider AX, EX and all their equivalents
     like keyword of this language. It allows a cleaner method to parse,
     because the distinction between them is done only in the lexer, and
     in the parser we just have to use a switch to call the right
     function.

     We also consider an infinite arity in the parser. In the switch to
     dispatch the method call, we check if we have the right arity.


     If you want to check "y" in a kripke structure where the
     description of the state is always "x", you will get an error
     "Unknown identifier: y."  Because the subject doesn't specify
     this point, and because we think checking something like this
     is generally a typographical error, we have made this choice.

** How to check the project

   There is three kind of test in the project:

   - simple.test: It takes some formulae and checks on little kripke
     structure if the result is the one expected.

   - medium.test: It checks on a slightly bigger kripke structure if
     it is correct.

   - big.test: Takes a file given in the subject, and runs check on it.

   - parse-ctl.test: It checks if our parser works as expected on
     errors. We check if it recognizes a bad parenthesis, unknown
     variable or function, and if the arity of each operator is correct.
